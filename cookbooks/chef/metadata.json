{
  "name": "chef",
  "description": "Installs and configures the Chef Client and Server",
  "long_description": "# RightScale Chef Server and Client Cookbook\n\n## DESCRIPTION:\n\nThis cookbook provides recipes for setting up and running a Chef Client.\n\n## REQUIREMENTS:\n\n* Requires a VM launched from a RightScale managed RightImage\n\n* Tested on the following RightImages: CentOS 6.3, Ubuntu 12.04\n\n* Tested Chef Client version 10.24.0-1\n\n## COOKBOOKS DEPENDENCIES:\n\nPlease see `metadata.rb` file for the latest dependencies.\n* `rightscale`\n\n## KNOWN LIMITATIONS:\n\nThere are no known limitations.\n\n## SETUP/USAGE:\n\n* When using a RightScale ServerTemplate, place `chef::install_client`\n  recipe into your runlist to setup the Chef Client. Set server_url,\n  validator_pem and validation_name to match the Chef Server configuration.\n\n* Set inputs reconverge_list to the value `chef::do_client_converge` and\n  interval to minutes.\n\nFor more info see: [Release Notes](http://support.rightscale.com/18-Release_Notes/ServerTemplates_and_RightImages/v13.4#Chef_Client_\\(v13.4\\))\n\n## DETAILS:\n\n### General\n\nThe cookbook installs the Chef Client with needed configuration for CentOS and\nUbuntu.\n\n### Attributes:\n\nThese are the settings used in recipes and templates. Default values are noted.\n* `node[:chef][:client][:version]`-\n  The package version. Default: \"10.24.0-1\"\n* `node[:chef][:client][:config_dir]`-\n  The Chef Client config directory. Default: \"/etc/chef\"\n* `node[:chef][:client][:server_url]`-\n  The url to connect to the remote Chef Server.\n* `node[:chef][:client][:validator_pem]`-\n  Private ssh key to register the Chef Client with the Chef Server.\n* `node[:chef][:client][:validation_name]`-\n  Validation name, along with the private ssh key, is used to determine whether\n  the Chef Client may register with the Chef Server. The validation_name\n  located on the Server and in the Client configuration file must match.\n* `node[:chef][:client][:node_name]`-\n  The node's name to register on the Chef Server.\n* `node[:chef][:client][:roles]`-\n  Comma separated list of roles which will be applied to this instance. Roles\n  should be defined on the Chef Server else recipe will fail.\n* `node[:chef][:client][:environment]`-\n  The Chef Server environment name. By default the Chef Client environment\n  variable is set to \"_default\".\n* `node[:chef][:client][:company]`-\n  Company name to be set in the Client configuration file. This attribute is\n  applicable for Opscode Hosted Chef Server. The company name specified in both\n  the Server and the Client configuration file must match.\n* `node[:chef][:client][:runlist_override]`-\n  A custom JSON string to be added to the first run of chef-client.\n* `node[:chef][:client][:log_level]`-\n  the level of logging that will be stored in the log file. Default: info.\n* `node[:chef][:client][:log_location]`-\n  the location of the log file. Default: /var/log/chef-client.log\n* `node[:chef][:client][:data_bag_secret]`-\n  secret key used to encrypt data bag items.\n\n### Templates:\n\n* `client.rb.erb`-\n  The Chef Client configuration file. Used in `chef::install_client` recipe.\n* `validation_key.erb`-\n  Private SSH key which will be used to authenticate the Chef Client on the\n  remote Chef Server. Used in `chef::install_client` and\n  `chef::do_client_converge` recipes.\n* `runlist.json.erb`-\n  The Chef Client runlist.json file. Defined in setup_runlist definition and\n  used in `chef::install_client` and `chef::do_client_converge` recipes.\n\n### Usage Example:\n\n## Update and execute runlist.\n\n* `chef::do_client_converge`\n  This recipe is used in the operational phase only. It runs runlist from file.\n  To update the roles user can provide new roles as input and run the recipe.\n  Roles to be used should be available on the Chef Server.\n\n## Chef Client Reconvergence\n\n* `sys::do_reconverge_list_enable`\n  This recipe is used in the boot and operational phase. It starts a periodic\n  reconverge.\n\n* `sys::do_reconverge_list_disable`\n  This recipe is used in the operational phase. It stops a periodic reconverge.\n\n## LICENSE:\n\nCopyright RightScale, Inc. All rights reserved.\nAll access and use subject to the RightScale Terms of Service available at\nhttp://www.rightscale.com/terms.php and, if applicable, other agreements\nsuch as a RightScale Master Subscription Agreement.\n",
  "maintainer": "RightScale, Inc.",
  "maintainer_email": "support@rightscale.com",
  "license": "Copyright RightScale, Inc. All rights reserved.",
  "platforms": {
    "centos": ">= 0.0.0",
    "redhat": ">= 0.0.0",
    "ubuntu": ">= 0.0.0"
  },
  "dependencies": {
    "rightscale": ">= 0.0.0"
  },
  "recommendations": {
  },
  "suggestions": {
  },
  "conflicting": {
  },
  "providing": {
  },
  "replacing": {
  },
  "attributes": {
    "chef/client/version": {
      "display_name": "Chef Client Version",
      "description": "Specify the Chef Client version to match requirements of your Chef Server. Example: 10.24.0-1",
      "required": "optional",
      "default": "10.24.0-1",
      "recipes": [
        "chef::install_client"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "chef/client/server_url": {
      "display_name": "Chef Server URL",
      "description": "Enter the URL to connect to the remote Chef Server. To connect to the Opscode Hosted Chef use the following syntax https://api.opscode.com/organizations/ORGNAME. Example: http://example.com:4000/chef",
      "required": "required",
      "recipes": [
        "chef::install_client"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "chef/client/validator_pem": {
      "display_name": "Private Key to Register the Chef Client with the Chef Server",
      "description": "Private SSH key which will be used to authenticate the Chef Client on the remote Chef Server.",
      "required": "required",
      "recipes": [
        "chef::install_client"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "chef/client/validation_name": {
      "display_name": "Chef Client Validation Name",
      "description": "Validation name, along with the private SSH key, is used to determine whether the Chef Client may register with the Chef Server. The validation_name located on the Server and in the Client configuration file must match. Example: ORG-validator",
      "required": "required",
      "recipes": [
        "chef::install_client"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "chef/client/node_name": {
      "display_name": "Chef Client Node Name",
      "description": "Name which will be used to authenticate the Chef Client on the remote Chef Server. If nothing is specified, the instance FQDN will be used. Valid node name must contain only alpabetic, numeric and .-_: characters. Example: chef-client-host1. The other characters in the node name will be removed.",
      "required": "optional",
      "recipes": [
        "chef::install_client"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "chef/client/environment": {
      "display_name": "Chef Client Environment",
      "description": "Specify the environment type for the Chef Client configuration file. Example: development",
      "required": "optional",
      "default": "_default",
      "recipes": [
        "chef::install_client"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "chef/client/company": {
      "display_name": "Chef Company Name",
      "description": "Company name to be set in the Client configuration file. This attribute is applicable for Opscode Hosted Chef Server. The company name specified in both the Server and the Client configuration file must match. Example: MyCompany",
      "required": "optional",
      "recipes": [
        "chef::install_client"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "chef/client/roles": {
      "display_name": "Set of Client Roles",
      "description": "Comma-separated list of roles which will be applied to this instance. The Chef Client will execute the roles in the order specified here. Example: webserver, monitoring",
      "required": "optional",
      "recipes": [
        "chef::install_client",
        "chef::do_client_converge"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "chef/client/runlist_override": {
      "display_name": "JSON String used to override the first run of chef-client.",
      "description": "A custom JSON string to override the first run of chef-client. Example: recipe[ntp::default]",
      "required": "optional",
      "recipes": [
        "chef::install_client"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "chef/client/log_level": {
      "display_name": "Logging Level",
      "description": "The level of logging that will be stored in the log file. Example: debug",
      "required": "optional",
      "default": "info",
      "recipes": [
        "chef::install_client"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "chef/client/log_location": {
      "display_name": "Log File Location",
      "description": "The location of the log file. Example: /var/log/chef-client.log",
      "required": "optional",
      "default": "/var/log/chef-client.log",
      "recipes": [
        "chef::install_client"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "chef/client/data_bag_secret": {
      "display_name": "Data Bag Secret Key",
      "description": "A secret key used to encrypt data bag items. Example: cred:CHEF_DATA_BAG_SECRET",
      "required": "optional",
      "default": "",
      "recipes": [
        "chef::install_client"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    }
  },
  "groupings": {
  },
  "recipes": {
    "chef::install_client": "Installs and configures the Chef Client.",
    "chef::do_client_converge": "Allows manual update/re-run of runlist on the Chef Client.",
    "chef::do_unregister_request": "Deletes the node and registered client on the Chef Server."
  },
  "version": "13.5.0"
}
