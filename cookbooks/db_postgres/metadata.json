{
  "dependencies": {
    "sys_dns": ">= 0.0.0",
    "rightscale": ">= 0.0.0",
    "db": ">= 0.0.0",
    "block_device": ">= 0.0.0"
  },
  "name": "db_postgres",
  "maintainer_email": "support@rightscale.com",
  "attributes": {
    "db_postgres": {
      "required": "optional",
      "calculated": false,
      "choice": [

      ],
      "type": "hash",
      "recipes": [

      ],
      "display_name": "General Database Options"
    },
    "db_postgres/database_name": {
      "required": "required",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db_postgres::default_9_1"
      ],
      "description": "Enter the name of the PostgreSQL database for setting up postgresql database monitoring. Ex: mydbname",
      "display_name": "Database Name"
    },
    "db_postgres/server_usage": {
      "required": "optional",
      "calculated": false,
      "choice": [
        "shared",
        "dedicated"
      ],
      "default": "dedicated",
      "type": "string",
      "recipes": [
        "db_postgres::default_9_1"
      ],
      "description": "Use 'dedicated' if the postgresql config file allocates all existing resources of the machine.  Use 'shared' if the PostgreSQL config file is configured to use less resources so that it can be run concurrently with other apps like Apache and Rails for example.",
      "display_name": "Server Usage"
    }
  },
  "license": "Copyright RightScale, Inc. All rights reserved.",
  "suggestions": {
  },
  "platforms": {
    "centos": "~> 5.8",
    "ubuntu": "~> 10.04.0",
    "redhat": "~> 5.8"
  },
  "maintainer": "RightScale, Inc.",
  "long_description": "= RightScale Database Manager for PostgreSQL (Beta)\n\n== DESCRIPTION:\n\nProvides the PostgreSQL implementation of the 'db' resource to install and\nmanage PostgreSQL database stand-alone servers and clients.\n\n\n== DETAILS\n\nThe 'db' implementation is defined by a Lightweight Provider, which can be\nfound in the providers/default.rb file.\n\nThe majority of the functionality of the PostgreSQL provider is encapsulated\nin the premium rightscale_tools gem. However, there are currently a handful\nof recipes that can be used without it. See 'Public Recipes' in the USAGE\nsection below.\n\n\n== REQUIREMENTS:\n\n* Requires a VM launched from a RightScale managed RightImage\n\n* Tested on CentOS 5.6 RightImage\n\n* Supports PostgreSQL 9.1\n\n* Needs RightScale Premium ServerTemplate tools gem installed on system.\n  This gem is only available for paid RightScale customers.\n  Please contact sales@rightscale.com to upgrade you account.\n\n== SETUP:\n\n* Place the <tt>db::default</tt> recipe into your runlist to set up the db resource.\n  When using a RightScale ServerTemplate, it will automatically add the\n  common database attributes to your ServerTemplate's inputs.\n\n* Also, place the <tt>db_postgres::default</tt> recipe into your runlist to load the\n  PostgreSQL provider, tuning parameters, as well as other PostgreSQL-specific\n  attributes in as inputs.\n\n== USAGE:\n\n=== Basic usage\nOnce setup, use the recipes in the 'db' cookbook to install and manage your\nPostgreSQL database servers and clients.  See the <tt>db/README.rdoc</tt> for usage\ndetails.\n\n\n=== PostgreSQL Tuning and postgresql.conf and pg_hba.conf\n\nCustom tuning parameters can be applied by overriding the <tt>postgres_tuning.rb</tt>\nattributes file. For more information and an example override repository,\nplease see:\n\n  https://github.com/ravibhure/cookbooks_public/tree/master/cookbooks/db_postgres\n\n\n=== Public Recipes\nHere is the list of db recipes that can be used without the premium\nrightscale_tools gem:\n\n* db::default\n* db::install_client\n* db::install_server\n* db::setup_monitoring\n* db::setup_privileges_admin\n* db::setup_privileges_application\n* db::do_appserver_allow\n* db::do_appserver_deny\n* db::request_appserver_allow\n* db::request_appserver_deny\n\nThese recipes are used by RightScale's LAMP ServerTemplates.\n\n\n== KNOWN LIMITATIONS\n\n* none\n  \n",
  "version": "12.1.0",
  "recommendations": {
  },
  "recipes": {
    "db_postgres::default_9_1": "Set the DB PostgresSQL provider. Sets version 9.1 and node variables specific to PostgresSQL 9.1.",
    "db_postgres::do_show_slave_sync_mode": "Show the sync mode for the replication.",
    "db_postgres::do_set_slave_async_mode": "Set master to do a sync based on replication with a slave. For more info refer http://www.postgresql.org/docs/9.1/static/warm-standby.html#SYNCHRONOUS-REPLICATION",
    "db_postgres::default": "Set the DB PostgreSQL provider. Sets version and node variables specific to the chosen PostgresSQL version.",
    "db_postgres::do_set_slave_sync_mode": "Set master to do sync based replication with slave. PostgreSQL streaming replication is asynchronous by default. If the primary server crashes then some transactions that were committed may not have been replicated to the standby server, causing data loss. The amount of data loss is proportional to the replication delay at the time of failover.\nSynchronous replication offers the ability to confirm that all changes made by a transaction have been transferred to one synchronous standby server. This extends the standard level of durability offered by a transaction commit. This level of protection is referred to as 2-safe replication in computer science theory.\nRef: http://www.postgresql.org/docs/9.1/static/warm-standby.html#SYNCHRONOUS-REPLICATION"
  },
  "groupings": {
  },
  "conflicting": {
  },
  "replacing": {
  },
  "description": "Installs/configures a PostgreSQL database server with automated backups.",
  "providing": {
  }
}