{
  "dependencies": {
    "db_mysql": ">= 0.0.0",
    "db_postgres": ">= 0.0.0",
    "rightscale": ">= 0.0.0",
    "sys_firewall": ">= 0.0.0",
    "block_device": ">= 0.0.0"
  },
  "name": "db",
  "maintainer_email": "support@rightscale.com",
  "attributes": {
    "db/backup/secondary/master/cron/minute": {
      "required": "optional",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::do_secondary_backup_schedule_enable"
      ],
      "description": "Defines the minute of the hour when the secondary backup will be taken of the master database. Backups of the master are taken daily. By default, a minute will be randomly chosen at launch time. Otherwise, the time of the backup is defined by 'Master Secondary Backup Cron Hour' and 'Master Secondary Backup Cron Minute'. Uses standard crontab format (e.g., 30 for minute 30 of the hour).",
      "display_name": "Master Secondary Backup Cron Minute"
    },
    "db/backup/secondary/slave/cron/hour": {
      "required": "optional",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::do_secondary_backup_schedule_enable"
      ],
      "description": "By default, secondary backups of the slave database are taken hourly. However, if you specify a value in this input (e.g., 23 for 11:00 PM), then backups will occur once per day at the specified hour, rather than hourly. Uses standard crontab format (e.g., 23 for 11:00 PM).",
      "display_name": "Slave Secondary Backup Cron Hour"
    },
    "db/backup/primary/master/cron/hour": {
      "required": "optional",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::do_primary_backup_schedule_enable"
      ],
      "description": "Defines the hour of the day when the primary backup will be taken of the master database. Backups of the master are taken daily. By default, an hour will be randomly chosen at launch time. Otherwise, the time of the backup is defined by 'Master Backup Cron Hour' and 'Master Backup Cron Minute'. Uses standard crontab format (e.g., 23 for 11:00 PM).",
      "display_name": "Master Backup Cron Hour"
    },
    "db/dns/slave/id": {
      "required": "required",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::do_set_dns_slave_private_ip"
      ],
      "description": "The unique identifier that is associated with the DNS A record of a slave server.  The unique identifier is assigned by the DNS provider when you create a dynamic DNS A record. This ID is used to update the associated A record with the private IP address of a slave server when this recipe is run.  If you are using DNS Made Easy as your DNS provider, a 7-digit number is used (e.g., 4403234).",
      "display_name": "Database Slave DNS Record ID"
    },
    "db/init_slave_at_boot": {
      "required": "optional",
      "calculated": false,
      "choice": [
        "true",
        "false"
      ],
      "default": "false",
      "type": "string",
      "recipes": [
        "db::do_init_slave_at_boot"
      ],
      "description": "Set to 'True' to have the instance initialize the database server as a slave on boot. Set to 'False' if there is no master database server running.",
      "display_name": "Init Slave at Boot"
    },
    "db/application/password": {
      "required": "required",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::default",
        "db::setup_privileges_application"
      ],
      "description": "The password of the database user that has 'user' privileges (e.g., cred:DBAPPLICATION_PASSWORD).",
      "display_name": "Database Application Password"
    },
    "db/dns/master/fqdn": {
      "required": "required",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::default"
      ],
      "description": "The fully qualified domain name for the master database server.  Example: db-master.example.com",
      "display_name": "Database Master FQDN"
    },
    "db/terminate_safety": {
      "required": "optional",
      "calculated": false,
      "choice": [
        "Override the dropdown and set to \"off\" to really run this recipe"
      ],
      "default": "Override the dropdown and set to \"off\" to really run this recipe",
      "type": "string",
      "recipes": [
        "db::do_delete_volumes_and_terminate_server"
      ],
      "description": "Prevents the accidental running of the 'db::do_teminate_server' recipe. This recipe will only run if this input variable is overridden and set to \"off\".",
      "display_name": "Terminate Safety"
    },
    "db/dump/container": {
      "required": "required",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::do_dump_import",
        "db::do_dump_export",
        "db::do_dump_schedule_enable"
      ],
      "description": "The cloud storage location where the dump file will be saved to or restored from. For Amazon S3, use the bucket name. For Rackspace Cloud Files, use the container name.",
      "display_name": "Dump Container"
    },
    "db/admin/password": {
      "required": "required",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::install_server",
        "db::setup_privileges_admin"
      ],
      "description": "The password of the database user with 'admin' privileges (e.g., cred:DBADMIN_PASSWORD).",
      "display_name": "Database Admin Password"
    },
    "db/backup/secondary/slave/cron/minute": {
      "required": "optional",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::do_secondary_backup_schedule_enable"
      ],
      "description": "Defines the minute of the hour when the secondary backup will be taken of the slave database. Backups of the slave are taken hourly. By default, a minute will be randomly chosen at launch time. Uses standard crontab format (e.g., 30 for minute 30 of the hour). Uses standard crontab format (e.g., 30 for minute 30 of the hour).",
      "display_name": "Slave Secondary Backup Cron Minute"
    },
    "db/backup/primary/slave/cron/minute": {
      "required": "optional",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::do_primary_backup_schedule_enable"
      ],
      "description": "Defines the minute of the hour when the backup EBS snapshot will be taken of the slave database. Backups of the slave are taken hourly. By default, a minute will be randomly chosen at launch time. Uses standard crontab format (e.g., 30 for minute 30 of the hour).",
      "display_name": "Slave Backup Cron Minute"
    },
    "db/dump/database_name": {
      "required": "required",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::do_dump_import",
        "db::do_dump_export",
        "db::do_dump_schedule_enable"
      ],
      "description": "Enter the name of the database name/schema to create/restore a dump from/for. Ex: mydbschema",
      "display_name": "Database Schema Name"
    },
    "db/dump": {
      "required": "optional",
      "calculated": false,
      "choice": [

      ],
      "type": "hash",
      "recipes": [

      ],
      "display_name": "Import/export settings for database dump file management."
    },
    "db/application/user": {
      "required": "required",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::default",
        "db::setup_privileges_application"
      ],
      "description": "The username of the database user that has 'user' privileges (e.g., cred:DBAPPLICATION_USER).",
      "display_name": "Database Application Username"
    },
    "db/backup/secondary/master/cron/hour": {
      "required": "optional",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::do_secondary_backup_schedule_enable"
      ],
      "description": "Defines the hour of the day when the secondary backup will be taken of the master database. Backups of the master are taken daily. By default, an hour will be randomly chosen at launch time. Otherwise, the time of the backup is defined by 'Master Secondary Backup Cron Hour' and 'Master Secondary Backup Cron Minute'. Uses standard crontab format (e.g., 23 for 11:00 PM).",
      "display_name": "Master Secondary Backup Cron Hour"
    },
    "db/backup/primary/slave/cron/hour": {
      "required": "optional",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::do_primary_backup_schedule_enable"
      ],
      "description": "By default, primary backups of the slave database are taken hourly. However, if you specify a value in this input (e.g., 23 for 11:00 PM), then backups will occur once per day at the specified hour, rather than hourly.",
      "display_name": "Slave Backup Cron Hour"
    },
    "db/admin/user": {
      "required": "required",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::install_server",
        "db::setup_privileges_admin"
      ],
      "description": "The username of the database user with 'admin' privileges (e.g., cred:DBADMIN_USER).",
      "display_name": "Database Admin Username"
    },
    "db/dns/slave/fqdn": {
      "required": "optional",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::do_set_dns_slave_private_ip"
      ],
      "description": "The fully qualified domain name for a slave database server. Example: db-slave.example.com",
      "display_name": "Database Slave FQDN"
    },
    "db/dump/storage_account_secret": {
      "required": "required",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::do_dump_import",
        "db::do_dump_export",
        "db::do_dump_schedule_enable"
      ],
      "description": "In order to write the dump file to the specified cloud storage location, you will need to provide cloud authentication credentials. For Amazon S3, use your AWS secret access key (e.g., cred:AWS_SECRET_ACCESS_KEY). For Rackspace Cloud Files, use your Rackspace account API key (e.g., cred:RACKSPACE_AUTH_KEY).",
      "display_name": "Dump Storage Account Secret"
    },
    "db/dump/prefix": {
      "required": "required",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::do_dump_import",
        "db::do_dump_export",
        "db::do_dump_schedule_enable"
      ],
      "description": "The prefix that will be used to name/locate the backup of a particular database dump. Defines the prefix of the dump file name that will be used to name the backup database dump file, along with a timestamp.",
      "display_name": "Dump Prefix"
    },
    "db/backup/lineage": {
      "required": "required",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::do_primary_init_slave",
        "db::do_secondary_init_slave",
        "db::do_init_slave_at_boot",
        "db::do_promote_to_master",
        "db::do_primary_restore_and_become_master",
        "db::do_secondary_restore_and_become_master",
        "db::do_init_and_become_master",
        "db::do_primary_backup",
        "db::do_primary_restore",
        "db::do_primary_backup_schedule_enable",
        "db::do_primary_backup_schedule_disable",
        "db::do_force_reset",
        "db::do_secondary_backup",
        "db::do_secondary_restore",
        "db::do_secondary_backup_schedule_enable",
        "db::do_secondary_backup_schedule_disable"
      ],
      "description": "The prefix that will be used to name/locate the backup of a particular database. Note: For servers running on Rackspace, this value also indicates the Cloud Files container to use for storing primary backups. If a Cloud Files container with this name does not already exist, the setup process creates one.",
      "display_name": "Database Backup Lineage"
    },
    "db/dns/ttl": {
      "required": "optional",
      "calculated": false,
      "choice": [
        "60",
        "300"
      ],
      "default": "60",
      "type": "string",
      "recipes": [
        "db::install_server"
      ],
      "description": "The upper limit for the TTL of the master DB DNS record in seconds. This value should be kept low in the event of Master DB failure so that the DNS record updates in a timely manner. When installing the DB server, this value is checked in the DNS records. Input should be set for 300 when using CloudDNS.",
      "display_name": "Database DNS TTL Limit"
    },
    "db/replication/password": {
      "required": "required",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::setup_replication_privileges",
        "db::do_primary_restore_and_become_master",
        "db::do_secondary_restore_and_become_master",
        "db::do_init_and_become_master",
        "db::do_promote_to_master",
        "db::do_primary_init_slave",
        "db::do_secondary_init_slave",
        "db::do_init_slave_at_boot"
      ],
      "description": "The password of the database user that has 'replication' privileges (e.g., cred:DBREPLICATION_PASSWORD).",
      "display_name": "Database Replication Password"
    },
    "db": {
      "required": "optional",
      "calculated": false,
      "choice": [

      ],
      "type": "hash",
      "recipes": [

      ],
      "display_name": "General Database Options"
    },
    "db/dump/storage_account_id": {
      "required": "required",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::do_dump_import",
        "db::do_dump_export",
        "db::do_dump_schedule_enable"
      ],
      "description": "In order to write the dump file to the specified cloud storage location, you need to provide cloud authentication credentials. For Amazon S3, use your Amazon access key ID (e.g., cred:AWS_ACCESS_KEY_ID). For Rackspace Cloud Files, use your Rackspace login username (e.g., cred:RACKSPACE_USERNAME).",
      "display_name": "Dump Storage Account ID"
    },
    "db/backup/restore_version_check": {
      "required": "optional",
      "calculated": false,
      "choice": [
        "true",
        "false"
      ],
      "default": "true",
      "type": "string",
      "recipes": [
        "db::do_primary_restore",
        "db::do_secondary_restore",
        "db::do_primary_init_slave",
        "db::do_secondary_init_slave",
        "db::do_init_slave_at_boot",
        "do_primary_restore_and_become_master",
        "do_secondary_restore_and_become_master"
      ],
      "description": "A variable for allowing the restoration of a database from a backup that was performed on a different version of the DB software. Make sure you fully understand the implications of cross-version restoration.  Set to 'False' to skip version checking.",
      "display_name": "Backup restore version check"
    },
    "db/replication/user": {
      "required": "required",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::setup_replication_privileges",
        "db::do_primary_restore_and_become_master",
        "db::do_secondary_restore_and_become_master",
        "db::do_init_and_become_master",
        "db::do_promote_to_master",
        "db::do_primary_init_slave",
        "db::do_secondary_init_slave",
        "db::do_init_slave_at_boot"
      ],
      "description": "The username of the database user that has 'replication' privileges (e.g., cred:DBREPLICATION_USER).",
      "display_name": "Database Replication Username"
    },
    "db/force_safety": {
      "required": "optional",
      "calculated": false,
      "choice": [
        "Override the dropdown and set to \"off\" to really run this recipe"
      ],
      "default": "Override the dropdown and set to \"off\" to really run this recipe",
      "type": "string",
      "recipes": [
        "db::do_force_reset"
      ],
      "description": "Prevents the accidental running of the db::do_force_reset recipe. This recipe will only run if the input variable is overridden and set to \"off\".",
      "display_name": "Force Reset Safety"
    },
    "db/dump/storage_account_provider": {
      "required": "required",
      "calculated": false,
      "choice": [
        "s3",
        "cloudfiles",
        "cloudfilesuk",
        "SoftLayer_Dallas",
        "SoftLayer_Singapore",
        "SoftLayer_Amsterdam"
      ],
      "type": "string",
      "recipes": [
        "db::do_dump_import",
        "db::do_dump_export",
        "db::do_dump_schedule_enable"
      ],
      "description": "Location where the dump file will be saved. Used by dump recipes to back up to remote object storage. (e.g. Amazon S3 or Rackspace Cloud Files)",
      "display_name": "Dump Storage Account Provider"
    },
    "db/backup/primary/master/cron/minute": {
      "required": "optional",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::do_primary_backup_schedule_enable"
      ],
      "description": "Defines the minute of the hour when the backup will be taken of the master database. Backups of the master are taken daily. By default, a minute will be randomly chosen at launch time. Otherwise, the time of the backup is defined by 'Master Backup Cron Hour' and 'Master Backup Cron Minute'. Uses standard crontab format (e.g., 30 for minute 30 of the hour).",
      "display_name": "Master Backup Cron Minute"
    },
    "db/backup/timestamp_override": {
      "required": "optional",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::do_primary_restore_and_become_master",
        "db::do_primary_restore",
        "db::do_primary_init_slave",
        "db::do_secondary_restore_and_become_master",
        "db::do_secondary_restore",
        "db::do_secondary_init_slave"
      ],
      "description": "An optional variable to restore a database backup with a specific timestamp rather than the most recent backup in the lineage. You must specify a string that matches the timestamp tag on the volume snapshot. You will need to specify the timestamp that is defined by the snapshot's tag (not the name). This is only used with AWS. For example, if the snapshot's tag is 'rs_backup:timestamp=1303613371' you would specify '1303613371' for this input.",
      "display_name": "Database Restore Timestamp Override"
    },
    "db/backup/lineage_override": {
      "required": "optional",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::do_init_slave_at_boot",
        "db::do_primary_restore_and_become_master",
        "db::do_primary_restore",
        "db::do_primary_init_slave",
        "db::do_secondary_restore_and_become_master",
        "db::do_secondary_restore",
        "db::do_secondary_init_slave"
      ],
      "description": "If defined, this will override the input defined for 'Backup Lineage' (db/backup/lineage) so that you can restore the database from another backup that has as a different lineage name. The most recently completed snapshots will be used unless a specific timestamp value is specified for 'Restore Timestamp Override' (db/backup/timestamp_override). Although this input allows you to restore from a different set of snapshots, subsequent backups will use 'Backup Lineage' to name the snapshots. Be sure to remove the 'Backup Lineage Override' input after the new master is operational.",
      "display_name": "Database Restore Lineage Override"
    },
    "db/dns/master/id": {
      "required": "required",
      "calculated": false,
      "choice": [

      ],
      "type": "string",
      "recipes": [
        "db::do_primary_restore_and_become_master",
        "db::do_secondary_restore_and_become_master",
        "db::do_init_and_become_master",
        "db::do_promote_to_master"
      ],
      "description": "The unique identifier that is associated with the DNS A record of the master database server. The unique identifier is assigned by the DNS provider when you create a dynamic DNS A record. This ID is used to update the associated A record with the private IP address of the master server when this recipe is run. If you are using DNS Made Easy as your DNS provider, a 7-digit number is used (e.g., 4403234).",
      "display_name": "Database Master DNS Record ID"
    }
  },
  "license": "Copyright RightScale, Inc. All rights reserved.",
  "suggestions": {
  },
  "platforms": {
    "centos": "~> 5.8",
    "ubuntu": "~> 10.04.0",
    "redhat": "~> 5.8"
  },
  "maintainer": "RightScale, Inc.",
  "long_description": "= RightScale Database Manager\n\n== DESCRIPTION:\n\nThis cookbook provides a set of database recipes used by the RightScale\nDatabase Manager ServerTemplates.\n\nThis cookbook does not contain a specific database implementation, rather\nit provides an interface for general database actions and parameters.\n\n== REQUIREMENTS:\n\n* Must be used with a 'db' provider in the cookbook path.\n* Depends on a <tt>block_device</tt> resource for backup and restore recipes.\n* Requires a virtual machine launched from a RightScale-managed RightImage.\n\n== COOKBOOKS DEPENDENCIES:\n\nPlease see <tt>metadata.rb</tt> file for the latest dependencies.\n\n== KNOWN LIMITATIONS:\n\n* Only one db provider should be present in your cookbook path.\n\n== SETUP:\n\n* Place <tt>db::default</tt> recipe into your runlist to set up the db resource. When\n  using a RightScale ServerTemplate, this will also automatically add the common\n  database attributes to your ServerTemplate's inputs.\n\n* The default recipe for the cookbook that contains the db provider must also be\n  added to your runlist. For example:\n\n    db_mysql::default\n\n  This will load your provider and pull in any database specific attributes as\n  inputs.\n\n== USAGE:\n\n=== Initialize a master database:\n\n1. Once your server is operational, run the:\n\n    \"db::setup_block_device\"\n\n   recipe, which initializes your database onto a block device\n   that supports backup and restore operations.\n2. Initialize your database from previous dump file or other source.\n3. Register your database with a DNS provider that supports dynamic DNS using:\n\n    \"sys_dns::do_set_private\"\n\n   to allow your application servers to start making connections.\n4. Backup your database using:\n\n    \"db:do_backup\"\n\n   so that you can restore the master database in the event \n   of a failure or planned termination.\n\n=== Restore a master database:\n\n1. Once your server is operational, run the:\n\n    \"db::do_restore\"\n\n   recipe, which restores your database from a backup previously saved to\n   persistent cloud storage.\n3. Register your database with a DNS provider that supports dynamic DNS using:\n\n    \"sys_dns::do_set_private\"\n\n   to allow your application servers to start making connections.\n\n== DETAILS:\n\n=== General\n\nThe 'db' interface is defined by a Lightweight Resource, which can be found in\nthe 'resources/default.rb' file.\n\nThis cookbook is intended to be used in conjunction with cookbooks that contain\nLightweight Providers which implement the 'db' interface. See RightScale's\n'db_mysql' cookbook for an example.\n\nFor more information about Lightweight Resources and Providers (LWRPs), please see: {Lightweight Resources and Providers}[http://support.rightscale.com/12-Guides/Chef_Cookbooks_Developer_Guide/08-Chef_Development/Lightweight_Resources_and_Providers_(LWRP)]\n\n=== Backup/Restore\n\nThis cookbook depends on the block_device LWRP for backup and restore actions.\nSee <tt>db::do_backup</tt> and <tt>db::do_restore</tt> recipes for examples. The\n'block_device' cookbook provides primary and secondary persistence solutions for\nmultiple clouds.\n\nHowever, using LWRPs one can provide their own block device implementation\ninstead.\n\nPlease see the 'block_device' cookbook for the list of available actions,\nattributes and usage.\n\n=== Providers:\n\nWhen writing your own database Lightweight Provider:\n\n* The database provider to use is defined by the node[:db][:provider] attribute. You\n  will need to override this attribute by adding the following code in the \n  attributes file of your provider cookbook.\n\n    set[:db][:provider] = \"db_myprovider\"\n\n\n* Any database-specific attributes that you wish to make into user-configurable\n  inputs should be added to the cookbook metadata with the default recipe included in\n  the attribute's 'recipes' array. For more about Chef metadata, please see: {Chef Metadata}[http://support.rightscale.com/12-Guides/Chef_Cookbooks_Developer_Guide/04-RightScale_Support_of_Chef/Chef_Metadata]\n\n* Your provider cookbook metadata should depend on this cookbook by adding a\n  'depends' line to its metadata. For example:\n\n    depends \"db\"\n\n= LICENSE:\n\nCopyright RightScale, Inc. All rights reserved.  All access and use subject to\nthe RightScale Terms of Service available at http://www.rightscale.com/terms.php\nand, if applicable, other agreements such as a RightScale Master Subscription\nAgreement.\n",
  "version": "12.1.0",
  "recommendations": {
  },
  "recipes": {
    "db::handle_demote_master": "Remote recipe executed by do_promote_to_master. DO NOT RUN.",
    "db::do_dump_schedule_disable": "Disables the daily run of do_dump_export.",
    "db::do_secondary_backup_schedule_disable": "Disables db::do_secondary_backup from being run periodically.",
    "db::do_primary_backup_schedule_disable": "Disables db::do_primary_backup from being run periodically.",
    "db::do_primary_backup": {
      "thread": "db_backup",
      "description": "Creates a primary backup of the database using persistent storage in the current cloud. On Rackspace, LVM backups are uploaded to the specified Cloud Files container. For all other clouds, volume snapshots (e.g., Amazon EBS or CloudStack volumes) are used."
    },
    "db::setup_monitoring": "Installs the collectd plugin for database monitoring support, which is required to enable monitoring and alerting functionality for your servers.",
    "db::request_appserver_allow": "Sends a request to allow connections from the caller's private IP address to all database servers in the deployment that are tagged with the database:active=true tag. This should be run on an application server before attempting a database connection.",
    "db::do_dump_schedule_enable": "Schedules the daily run of do_dump_export.",
    "db::do_dump_export": "Creates a dump file and uploads it to a remote object storage (e.g., Amazon S3 or Rackspace Cloud Files).",
    "db::request_master_deny": "Sends a request to the master database server tagged with rs_dbrepl:master_instance_uuid=<master_instance_uuid> to deny connections from the server's private IP address. This script should be run on a slave when it stops replicating.",
    "db::setup_replication_privileges": "Sets up privileges for replication slave servers.",
    "db::do_primary_restore_and_become_master": "Restores the database and tags it as the master database server. Sets DNS. Starts a fresh backup from this master.",
    "db::do_secondary_backup": {
      "thread": "db_backup",
      "description": "Creates a backup of the database and uploads it to a secondary cloud storage location, which can be used to migrate your database to a different cloud. For example, you can save a secondary backup to an Amazon S3 bucket or a Rackspace Cloud Files container."
    },
    "db::default": "Adds the database:active=true tag to your server, which identifies it as a database server. The tag is used by application servers to identify active databases. It also loads the required 'db' resources.",
    "db::do_delete_volumes_and_terminate_server": "Deletes any currently attached volumes from the instance and then terminates the machine.",
    "db::do_secondary_restore_and_become_master": "Restores the database from a secondary backup location and tags it as the master database server. Sets DNS. Starts a fresh backup from this master.",
    "db::do_secondary_restore": "Restores the database from the most recently completed backup available in a secondary location.",
    "db::do_init_and_become_master": "Initializes the database and tags it as the master database server. Sets DNS. Starts a fresh backup from this master.",
    "db::do_primary_backup_schedule_enable": "Enables db::do_primary_backup to be run periodically.",
    "db::install_server": "Installs and sets up the packages that are required for database servers.",
    "db::do_appservers_allow": "Allows connections from all application servers in the deployment that are tagged with appserver:active=true tag. This script should be run on a database server so that it will accept connections from related application servers.",
    "db::do_dump_import": "Retrieves a dump file from remote object storage (e.g., Amazon S3 or Rackspace Cloud Files) and imports it to the database server.",
    "db::install_client": "Installs the database client onto the virtual machine so that it can connect to a running server. This should be run on all database servers and servers intended to connect to the servers.",
    "db::do_primary_init_slave": "Initializes the slave server from the primary backup location.",
    "db::do_force_reset": "Resets the database back to a pristine state. WARNING: Execution of this script will delete any data in your database!",
    "db::setup_privileges_admin": "Adds the username and password for 'superuser' privileges.",
    "db::do_primary_restore": "Restores the database from the most recently completed primary backup available in persistent storage of the current cloud.",
    "db::request_master_allow": "Sends a request to the master database server tagged with rs_dbrepl:master_instance_uuid=<master_instance_uuid> to allow connections from the server's private IP address. This script should be run on a slave before it sets up replication.",
    "db::do_promote_to_master": "Promotes a replicating slave to master.",
    "db::do_secondary_backup_schedule_enable": "Enables db::do_secondary_backup to be run periodically.",
    "db::do_set_dns_slave_private_ip": "Sets the slave DNS record to the private IP.",
    "db::do_init_slave_at_boot": "Initializes the slave server at boot.",
    "db::do_secondary_init_slave": "Initializes the slave server from the secondary backup location.",
    "db::request_appserver_deny": "Sends a request to deny connections from the caller's private IP address to all database servers in the deployment that are tagged with the database:active=true tag. This should be run on an application server upon decommissioning.",
    "db::do_appservers_deny": "Denies connections from all application servers in the deployment that are tagged with appserver:active=true tag. This script can be run on a database server to deny connections from all application servers in the deployment.",
    "db::setup_privileges_application": "Adds the username and password for application privileges."
  },
  "groupings": {
  },
  "conflicting": {
  },
  "replacing": {
  },
  "description": "RightScale Database Manager",
  "providing": {
  }
}